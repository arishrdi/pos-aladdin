@extends('layouts.app')

@section('title', 'Dashboard')

@section('content')
<!-- Outlet Info -->
<div class="mb-6">
    <div class="bg-white rounded-lg p-4 card-shadow flex items-center justify-between">
        <!-- Left side - Outlet info with icon -->
        <div class="flex items-center space-x-4">
            <!-- Store icon -->
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-store">
                <path d="m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7"/>
                <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                <path d="M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4"/>
                <path d="M2 7h20"/>
                <path d="M22 7v3a2 2 0 0 1-2 2v0a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12v0a2 2 0 0 1-2-2V7"/>
            </svg>
            
            <div>
                <h2 class="text-lg font-semibold text-gray-800" id="outletName">Loading...</h2>
                <p class="text-sm text-gray-600 mt-1">Data yang ditampilkan adalah untuk outlet <span id="outletNameText">loading</span>.</p>
            </div>
        </div>
        
        <!-- Right side - Date range picker -->
        <div class="relative">
            <button id="dateRangeButton" class="flex items-center space-x-2 bg-gray-50 hover:bg-gray-100 px-3 py-2 rounded-lg transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar-days">
                    <path d="M8 2v4"/>
                    <path d="M16 2v4"/>
                    <rect width="18" height="18" x="3" y="4" rx="2"/>
                    <path d="M3 10h18"/>
                    <path d="M8 14h.01"/>
                    <path d="M12 14h.01"/>
                    <path d="M16 14h.01"/>
                    <path d="M8 18h.01"/>
                    <path d="M12 18h.01"/>
                    <path d="M16 18h.01"/>
                </svg>
                <span id="dateRangeDisplay" class="text-sm font-medium text-gray-800">Loading...</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down">
                    <path d="m6 9 6 6 6-6"/>
                </svg>
            </button>
            
            <!-- Date picker dropdown -->
            <div id="datePickerDropdown" class="hidden absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 z-10 p-4">
                <div class="flex justify-between items-center mb-4">
                    <button id="prevMonth" class="p-1 rounded-full hover:bg-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left">
                            <path d="m15 18-6-6 6-6"/>
                        </svg>
                    </button>
                    <h3 id="currentMonthYear" class="font-medium">Mei 2025</h3>
                    <button id="nextMonth" class="p-1 rounded-full hover:bg-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right">
                            <path d="m9 18 6-6-6-6"/>
                        </svg>
                    </button>
                </div>
                
                <div class="grid grid-cols-7 gap-1 text-center text-xs font-medium text-gray-500 mb-2">
                    <div>M</div>
                    <div>S</div>
                    <div>S</div>
                    <div>R</div>
                    <div>K</div>
                    <div>J</div>
                    <div>S</div>
                </div>
                
                <div id="calendarDays" class="grid grid-cols-7 gap-1 text-sm">
                    <!-- Calendar days will be generated by JavaScript -->
                </div>
                
                <div class="flex justify-between mt-4 pt-4 border-t border-gray-200">
                    <button id="cancelDateRange" class="px-3 py-1 text-sm text-gray-600 hover:bg-gray-100 rounded">Batal</button>
                    <button id="applyDateRange" class="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">Terapkan</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Stats Cards - Row 1 -->
<div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
    <!-- Total Penjualan -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Total Penjualan</p>
                <p class="text-xl font-bold" id="totalSales">Loading...</p>
            </div>
            <div class="bg-green-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500">
                    <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                    <line x1="3" y1="6" x2="21" y2="6"></line>
                    <path d="M16 10a4 4 0 0 1-8 0"></path>
                </svg>
            </div>
        </div>
    </div>
    
    <!-- Transaksi -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Transaksi</p>
                <p class="text-xl font-bold" id="totalOrders">Loading...</p>
            </div>
            <div class="bg-blue-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-500">
                    <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
                    <line x1="1" y1="10" x2="23" y2="10"></line>
                </svg>
            </div>
        </div>
    </div>
    
    <!-- Total Item Terjual -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Total Item Terjual</p>
                <p class="text-xl font-bold" id="totalItems">Loading...</p>
            </div>
            <div class="bg-green-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500">
                    <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
                    <polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline>
                    <line x1="12" y1="22.08" x2="12" y2="12"></line>
                </svg>
            </div>
        </div>
    </div>
    
    <!-- Average Order Value -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Rata-rata Nilai Order</p>
                <p class="text-xl font-bold" id="averageOrder">Loading...</p>
            </div>
            <div class="bg-purple-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-purple-500">
                    <line x1="12" y1="1" x2="12" y2="23"></line>
                    <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                </svg>
            </div>
        </div>
    </div>
</div>

<!-- Stats Cards - Row 2: New Metrics -->
<div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
    <!-- Total Diskon -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Total Diskon</p>
                <p class="text-xl font-bold text-orange-600" id="totalDiscount">Loading...</p>
            </div>
            <div class="bg-orange-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-orange-500">
                    <path d="M9 12l2 2 4-4"></path>
                    <path d="M21 12c.552 0 1-.448 1-1V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v6c0 .552.448 1 1 1h18z"></path>
                    <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7"></path>
                </svg>
            </div>
        </div>
    </div>
    
    <!-- Total Bonus -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Total Bonus Keluar</p>
                <p class="text-xl font-bold text-yellow-600" id="totalBonus">Loading...</p>
            </div>
            <div class="bg-yellow-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-yellow-500">
                    <path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"></path>
                    <path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"></path>
                    <path d="M4 22h16"></path>
                    <path d="M10 14.66V17c0 .55.47.98.97 1.21C11.25 18.48 11.61 18.78 12 19c.39-.22.75-.52 1.03-.79.5-.23.97-.66.97-1.21v-2.34"></path>
                    <path d="M18 2H6v7a6 6 0 0 0 12 0V2z"></path>
                </svg>
            </div>
        </div>
    </div>
    
    <!-- Transaksi Cancel -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Transaksi Cancel</p>
                <p class="text-xl font-bold text-red-600" id="totalCancelled">Loading...</p>
            </div>
            <div class="bg-red-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-red-500">
                    <path d="m21 21-6-6m6 6v-4.8m0 4.8h-4.8"></path>
                    <path d="M3 16.2V21m0 0h4.8M3 21l6-6"></path>
                    <path d="M21 7.8V3m0 0h-4.8M21 3l-6 6"></path>
                    <path d="M3 7.8V3m0 0h4.8M3 3l6 6"></path>
                </svg>
            </div>
        </div>
    </div>
    
    <!-- Transaksi Refund -->
    <div class="bg-white rounded-lg p-4 card-shadow">
        <div class="flex justify-between items-start">
            <div>
                <p class="text-sm text-gray-500">Transaksi Refund</p>
                <p class="text-xl font-bold text-indigo-600" id="totalRefunded">Loading...</p>
            </div>
            <div class="bg-indigo-100 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-indigo-500">
                    <path d="M3 7v6h6"></path>
                    <path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"></path>
                </svg>
            </div>
        </div>
    </div>
</div>

<!-- Two Columns -->
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- Left Column -->
    <div class="lg:col-span-2">
    <!-- Overview with Bar Chart -->
    <div class="bg-white rounded-lg p-4 card-shadow mb-6">
        <h3 class="font-semibold text-gray-800 mb-4">Overview</h3>
        <p class="text-sm text-gray-600 mb-2">Data penjualan untuk <span class="outlet-name">loading</span></p>
        <p class="text-xl font-bold text-green-500 mb-4" id="totalSalesOverview">Loading...</p>
        
        <!-- Bar Chart Container -->
        <div class="relative h-64">
            <canvas id="salesChart"></canvas>
        </div>
    </div>
</div>
    
    <!-- Right Column -->
    <div class="lg:col-span-1">
        <!-- Penjualan Terlaris -->
        <div class="bg-white rounded-lg p-4 card-shadow mb-6">
            <h3 class="font-semibold text-gray-800 mb-4">Penjualan Terlaris</h3>
            <p class="text-sm text-gray-600 mb-2">Produk terlaris</p>
            
            <div class="space-y-3" id="topProductsList">
                <!-- Top products will be inserted here -->
                <div class="flex justify-between items-center">
                    <div>
                        <p class="font-medium">Loading...</p>
                        <p class="text-sm text-gray-500">Qty: -</p>
                    </div>
                    <p class="font-bold text-green-500">Rp -</p>
                </div>
            </div>
        </div>

        <!-- Produk Bonus Terlaris -->
        <div class="bg-white rounded-lg p-4 card-shadow">
            <h3 class="font-semibold text-gray-800 mb-4">Produk Bonus Terlaris</h3>
            <p class="text-sm text-gray-600 mb-2">Bonus yang paling banyak keluar</p>
            
            <div class="space-y-3" id="topBonusProductsList">
                <!-- Top bonus products will be inserted here -->
                <div class="flex justify-between items-center">
                    <div>
                        <p class="font-medium">Loading...</p>
                        <p class="text-sm text-gray-500">Qty: -</p>
                    </div>
                    <div class="flex items-center">
                        <div class="bg-yellow-100 text-yellow-600 px-2 py-1 rounded-full text-xs font-semibold">
                            BONUS
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM fully loaded. Initializing dashboard...');
        
        // Connect the outlet dropdown to dashboard updates
        connectOutletDropdownToDashboard();
        
        // Also hook into the loadOutletsFromAPI function to ensure it triggers dashboard updates
        const originalLoadOutletsFromAPI = window.loadOutletsFromAPI;
        
        if (typeof originalLoadOutletsFromAPI === 'function') {
            window.loadOutletsFromAPI = async function() {
                // Call the original function
                await originalLoadOutletsFromAPI();
                
                // After outlets are loaded, make sure we're looking at the selected outlet
                fetchDashboardData();
            };
        }
        
        // Fetch dashboard data with current outlet ID from localStorage
        fetchDashboardData();
        
        // Date Range Picker Functionality
        initDatePicker();
    });
        
        // Function to fetch dashboard data
    function fetchDashboardData() {
        // Get current outlet ID from localStorage
        const outletId = getSelectedOutletId();
        
        // Get current date range from URL or use default (first day of current month to today)
        const urlParams = new URLSearchParams(window.location.search);
        
        // Get today's date and first day of current month
        const today = new Date();
        const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        
        // Format dates as YYYY-MM-DD
        const formatYMD = (date) => {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        };
        
        // Use URL parameters if available, otherwise use defaults
        const startDate = urlParams.get('start_date') || formatYMD(firstDayOfMonth);
        const endDate = urlParams.get('end_date') || formatYMD(today);
        
        // Update date display
        updateDateDisplay(startDate, endDate);
        
        console.log(`Fetching dashboard data for outlet ID: ${outletId} from ${startDate} to ${endDate}`);
        
        // Make API request with dynamic outlet ID
        fetch(`/api/reports/dashboard-summary/${outletId}?start_date=${startDate}&end_date=${endDate}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`,
                'Accept': 'application/json'
            }
        })
            .then(response => {
                // Check if response is ok
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    updateDashboard(data.data);
                } else {
                    console.error('Error fetching dashboard data:', data.message);
                    useDummyData();
                }
            })
            .catch(error => {
                console.error('Failed to fetch dashboard data:', error);
                // Use dummy data if API call fails
                useDummyData();
            });
    }
        
    // Function to get the currently selected outlet ID - modified to match your localStorage key
    function getSelectedOutletId() {
        // First check if outlet_id is in URL parameters (highest priority)
        const urlParams = new URLSearchParams(window.location.search);
        const outletIdFromUrl = urlParams.get('outlet_id');
        
        if (outletIdFromUrl) {
            return outletIdFromUrl;
        }
        
        // Then check localStorage for selected outlet - using your existing localStorage key
        const savedOutletId = localStorage.getItem('selectedOutletId');
        
        if (savedOutletId) {
            return savedOutletId;
        }
        
        // Default to outlet ID 1 if nothing is found
        return 1;
    }

    // This function connects your existing outlet dropdown with the dashboard refresh
    function connectOutletDropdownToDashboard() {
        // Get the outlet list container and monitor when users click on outlets
        const outletListContainer = document.getElementById('outletListContainer');
        
        if (outletListContainer) {
            // Use event delegation to catch all outlet item clicks
            outletListContainer.addEventListener('click', function(event) {
                // Find the clicked li element (may be the span or icon inside)
                let targetElement = event.target;
                while (targetElement && targetElement !== outletListContainer && targetElement.tagName !== 'LI') {
                    targetElement = targetElement.parentElement;
                }
                
                // If we clicked on an outlet list item
                if (targetElement && targetElement.tagName === 'LI') {
                    // Dashboard will be updated by your existing code setting localStorage
                    // and calling loadProductData, but we'll add an additional hook
                    
                    // The dashboard should update after a short delay to allow your
                    // existing code to complete
                    setTimeout(() => {
                        fetchDashboardData();
                    }, 100);
                }
            });
        }
        
        // Also modify your outlet dropdown button behavior if available
        const outletDropdownButton = document.getElementById('outletDropdownButton');
        if (outletDropdownButton) {
            // Ensure the dashboard updates every time the outlet is changed
            const originalClickHandler = outletDropdownButton.onclick;
            outletDropdownButton.onclick = function(event) {
                if (originalClickHandler) {
                    originalClickHandler.call(this, event);
                }
                
                // Additional hook to make sure dashboard gets updated
                setTimeout(() => {
                    const selectedOutletId = localStorage.getItem('selectedOutletId');
                    if (selectedOutletId) {
                        fetchDashboardData();
                    }
                }, 200);
            };
        }
    }
    
    // Function to update dashboard with API data
    function updateDashboard(data) {
        // Update outlet info
        document.getElementById('outletName').textContent = data.outlet;
        document.getElementById('outletNameText').textContent = data.outlet;
        document.querySelectorAll('.outlet-name').forEach(el => {
            el.textContent = data.outlet;
        });
        
        // Update summary stats
        document.getElementById('totalSales').textContent = formatCurrency(data.summary.total_sales);
        document.getElementById('totalOrders').textContent = data.summary.total_orders;
        document.getElementById('totalItems').textContent = data.summary.total_items + ' Item';
        document.getElementById('averageOrder').textContent = formatCurrency(data.summary.average_order_value);
        document.getElementById('totalSalesOverview').textContent = formatCurrency(data.sales.current_period);
        
        // Update new metrics
        document.getElementById('totalDiscount').textContent = formatCurrency(data.summary.total_discount || 0);
        document.getElementById('totalBonus').textContent = formatCurrency(data.summary.total_bonus_value || 0);
        document.getElementById('totalCancelled').textContent = formatCurrency(data.summary.total_cancelled || 0);
        document.getElementById('totalRefunded').textContent = formatCurrency(data.summary.total_refunded || 0);
        
        // Update top products
        updateTopProducts(data.top_products);
        
        // Update top bonus products
        updateTopBonusProducts(data.top_bonus_products || []);
        
        // Update chart
        updateSalesChart(data.daily_sales);
    }
    
    // Format currency as IDR
    function formatCurrency(value) {
        return 'Rp ' + parseFloat(value).toLocaleString('id-ID');
    }
    
    // Format date for display
    function formatDate(dateString) {
        const date = new Date(dateString);
        const day = date.getDate();
        const monthNames = ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 
                           'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'];
        const month = monthNames[date.getMonth()];
        const year = date.getFullYear();
        
        return `${day} ${month} ${year}`;
    }
    
    // Update date display
    function updateDateDisplay(startDate, endDate) {
        const formattedStartDate = formatDate(startDate);
        const formattedEndDate = formatDate(endDate);
        document.getElementById('dateRangeDisplay').textContent = `${formattedStartDate} - ${formattedEndDate}`;
    }
    
    // Update top products list
    function updateTopProducts(products) {
        const container = document.getElementById('topProductsList');
        container.innerHTML = '';
        
        if (products.length === 0) {
            container.innerHTML = `
                <div class="flex justify-center items-center py-4">
                    <p class="text-gray-500">Tidak ada produk terjual dalam periode ini</p>
                </div>
            `;
            return;
        }
        
        products.forEach(product => {
            const productElement = document.createElement('div');
            productElement.className = 'flex justify-between items-center';
            productElement.innerHTML = `
                <div>
                    <p class="font-medium">${product.name}</p>
                    <p class="text-sm text-gray-500">Qty: ${product.quantity}</p>
                </div>
                <p class="font-bold text-green-500">${formatCurrency(product.total)}</p>
            `;
            container.appendChild(productElement);
        });
    }
    
    // Update top bonus products list
    function updateTopBonusProducts(bonusProducts) {
        const container = document.getElementById('topBonusProductsList');
        container.innerHTML = '';
        
        if (bonusProducts.length === 0) {
            container.innerHTML = `
                <div class="flex justify-center items-center py-4">
                    <p class="text-gray-500">Tidak ada bonus keluar dalam periode ini</p>
                </div>
            `;
            return;
        }
        
        bonusProducts.forEach(product => {
            const productElement = document.createElement('div');
            productElement.className = 'flex justify-between items-center';
            productElement.innerHTML = `
                <div>
                    <p class="font-medium">${product.name}</p>
                    <p class="text-sm text-gray-500">Qty: ${product.bonus_quantity || 0}</p>
                </div>
                <div class="flex items-center">
                    <div class="bg-yellow-100 text-yellow-600 px-2 py-1 rounded-full text-xs font-semibold">
                        BONUS
                    </div>
                </div>
            `;
            container.appendChild(productElement);
        });
    }
    
    // Update sales chart
    function updateSalesChart(dailySales) {
        // Get the canvas element
        const ctx = document.getElementById('salesChart').getContext('2d');
        
        // If there's an existing chart, destroy it
        if (window.salesChartInstance) {
            window.salesChartInstance.destroy();
        }
        
        // Extract dates and sales values
        const dates = Object.keys(dailySales).sort();
        const salesData = dates.map(date => dailySales[date].sales);
        
        // Format dates for display
        const formattedDates = dates.map(date => {
            const d = new Date(date);
            const dayNames = ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'];
            return dayNames[d.getDay()] + ', ' + d.getDate();
        });
        
        // Create the bar chart
        window.salesChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: formattedDates,
                datasets: [{
                    label: 'Penjualan (Rp)',
                    data: salesData,
                    backgroundColor: 'rgba(249, 115, 22, 0.7)', // green color with transparency
                    borderColor: 'rgba(249, 115, 22, 1)', // Solid green for border
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                if (value >= 1000) {
                                    return 'Rp ' + (value / 1000) + 'k';
                                }
                                return 'Rp ' + value;
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Rp ' + context.raw.toLocaleString('id-ID');
                            }
                        }
                    }
                }
            }
        });
    }
    
    // Initialize date picker
    function initDatePicker() {
        const dateRangeButton = document.getElementById('dateRangeButton');
        const datePickerDropdown = document.getElementById('datePickerDropdown');
        const currentMonthYear = document.getElementById('currentMonthYear');
        const calendarDays = document.getElementById('calendarDays');
        const prevMonth = document.getElementById('prevMonth');
        const nextMonth = document.getElementById('nextMonth');
        const cancelDateRange = document.getElementById('cancelDateRange');
        const applyDateRange = document.getElementById('applyDateRange');
        
        let currentDate = new Date();
        let startDate = null;
        let endDate = null;
        
        // Get current date range from URL or use default
        const urlParams = new URLSearchParams(window.location.search);
        const startDateParam = urlParams.get('start_date');
        const endDateParam = urlParams.get('end_date');
        
        if (startDateParam && endDateParam) {
            startDate = new Date(startDateParam);
            endDate = new Date(endDateParam);
        } else {
            // Default to beginning of month until today
            startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1); // First day of current month
            endDate = new Date(); // Today
        }
        
        // Toggle dropdown
        dateRangeButton.addEventListener('click', function() {
            datePickerDropdown.classList.toggle('hidden');
            if (!datePickerDropdown.classList.contains('hidden')) {
                renderCalendar(currentDate);
            }
        });
        
        // Navigation between months
        prevMonth.addEventListener('click', function() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar(currentDate);
        });
        
        nextMonth.addEventListener('click', function() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar(currentDate);
        });
        
        // Render calendar
        function renderCalendar(date) {
            const year = date.getFullYear();
            const month = date.getMonth();
            
            currentMonthYear.textContent = new Intl.DateTimeFormat('id-ID', { 
                month: 'long', 
                year: 'numeric' 
            }).format(date);
            
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const daysInMonth = lastDay.getDate();
            
            // Adjust for Indonesian calendar (Monday = 0)
            let startingDay = firstDay.getDay() - 1;
            if (startingDay < 0) startingDay = 6; // Sunday becomes 6
            
            calendarDays.innerHTML = '';
            
            // Previous month's days
            const prevMonthLastDay = new Date(year, month, 0).getDate();
            for (let i = 0; i < startingDay; i++) {
                const day = document.createElement('div');
                day.className = 'text-gray-400 p-1';
                day.textContent = prevMonthLastDay - startingDay + i + 1;
                calendarDays.appendChild(day);
            }
            
            // Current month's days
            for (let i = 1; i <= daysInMonth; i++) {
                const day = document.createElement('div');
                day.className = 'p-1 rounded-full cursor-pointer hover:bg-gray-100 text-center';
                day.textContent = i;
                
                const currentDay = new Date(year, month, i);
                
                // Highlight selected range
                if (startDate && endDate && currentDay >= startDate && currentDay <= endDate) {
                    day.className += ' bg-green-100 text-green-600';
                } else if (startDate && !endDate && currentDay.getTime() === startDate.getTime()) {
                    day.className += ' bg-green-600 text-white';
                }
                
                day.addEventListener('click', function() {
                    selectDate(currentDay);
                });
                
                calendarDays.appendChild(day);
            }
            
            // Next month's days
            const totalCells = startingDay + daysInMonth;
            const remainingCells = 42 - totalCells; // 6 weeks
            for (let i = 1; i <= remainingCells; i++) {
                const day = document.createElement('div');
                day.className = 'text-gray-400 p-1 text-center';
                day.textContent = i;
                calendarDays.appendChild(day);
            }
        }
        
        // Select date range
        function selectDate(date) {
            if (!startDate || (startDate && endDate)) {
                startDate = date;
                endDate = null;
            } else if (date > startDate) {
                endDate = date;
            } else {
                endDate = startDate;
                startDate = date;
            }
            
            renderCalendar(currentDate);
        }
        
        // Apply date range
        applyDateRange.addEventListener('click', function() {
            if (startDate && endDate) {
                const formattedStartDate = formatYMD(startDate);
                const formattedEndDate = formatYMD(endDate);
                
                // Update URL and reload page
                window.location.href = `?start_date=${formattedStartDate}&end_date=${formattedEndDate}`;
            }
            
            datePickerDropdown.classList.add('hidden');
        });
        
        // Format date as YYYY-MM-DD
        function formatYMD(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
        
        // Cancel selection
        cancelDateRange.addEventListener('click', function() {
            datePickerDropdown.classList.add('hidden');
        });
        
        // Initial date display update
        updateDateDisplay(formatYMD(startDate), formatYMD(endDate));
    }
</script>
@endsection